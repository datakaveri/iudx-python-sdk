@startuml
class Catalogue  {
    <extends HttpEntity>
  -- public variables --
  Enum IUDXEntityEnum
  optional str url (default to staticurl)
  optional str token (required for onboarders)
  optional list headers
  -- public methods --
  Catalogue init(optional str cat_url, optional str token, option dict headers)
  bool status() // check status
  CatalogueResult search_entity(CatalogueQuery query) // search
  CatalogueResult count_entity(CatalogueQuery query) // count
  CatalogueResult list_entity(IUDXEntityEnum entity_type) // list
  CatalogueResult rel_search(CatalogueQuery query) // relsearch
  CatalogueResult get_related_entity(str iid, IUDXEntityEnum rel)
  CatalogueResult get_item(str id) // get item given id
  CatalogueResult create(dict item) // any item
  CatalogueResult update(dict item) // any item
  CatalogueResult get_data_model(str id) // given the id
  CatalogueResult delete(str id)
  boolean validate(dict item)
  void update_token(str token)
}

class HTTPEntity  {
  <extends Requests>
  -- public variables --
  dict cert // (str cert, str key)
  -- public methods --
  HTTPResponse get(str url, dict headers)
  HTTPResponse delete(str url, dict headers)
  HTTPResponse post(str url, dict body, dict headers)
  HTTPResponse update(str url, dict body, dict headers)
}

class HTTPResponse {
  <extends requests.Response>
  -- private variables --
  Response _response
  -- public methods --
  dict json()
  int status_code()

}


class CatalogueQuery {
    -- private variables--
    str _geoproperty, _geometry, _georel
    int _max_distance
    list _coordinates
    list<str> _key
    list<list<str>> _value
    str _text_query
    list<str> _filters
    -- public methods --
    CatalogueQuery geo_search(str geoproperty,
        \t str geometry, str georel, 
        \t int _max_distance, list coordinates)
    CatalogueQuery property_search(str key,
                        \t <list<str>> value)
    CatalogueQuery text_search(str text_query)
    CatalogueQuery add_filters(list<str> filters)
    str get_query()
}


class CatalogueResult {
    -- static variables --
    int _page_size
    -- public variables --
    list<dict> documents
    int total_hits
    int total_pages
    int current_page
    bool is_valid
    str status
    -- public --
    CatalogueResult next_page() //append to documents
    CatalogueResult goto_page(int pagenum)
    CatalogueResult all_pages()

}



@enduml
